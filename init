#!/bin/sh
#
# pi-top bootloader re-imaging script
#

# pi-topOS bootloader common constants and functions

export SD_CARD_DEVICE_P1="/dev/mmcblk0p1"
export SD_CARD_DEVICE_P5="/dev/mmcblk0p5"

export SD_CARD_MOUNT_POINT_P1="/tmp/mmcblk0p1"
export SD_CARD_MOUNT_POINT_P5="/tmp/mmcblk0p5"

export PT_BOOT_PARTITION_ID="5"

delete_dir()
{
    # Remove directory

    rm -rf "${1}"
}

create_empty_dir()
{
    # Create a directory - ensure it is available and empty by removing it first

    delete_dir "${1}"
    mkdir -p "${1}"
}

print_title()
{
    echo -e "\033[1;33m[ ${1} ]\033[0m"
}

print_error()
{
    echo -e "\033[0;31m${1}\033[0m"
}

mount_device()
{
    # Mount a device to a new directory and log

    echo "Mounting ${1} to ${2}..."

    create_empty_dir "${2}"
    mount "${1}" "${2}" 2>/dev/null

    local mount_point=$(findmnt -nr -o target -S "${1}")

    if [ -z "${mount_point}" ]; then

        print_error "Failed to mount device"
        delete_dir "${2}"
    else

        echo "Device mounted"
    fi
}

unmount_device()
{
    local mount_point=$(findmnt -nr -o target -S "${1}")

    if [ -d "${mount_point}" ]; then

        umount -f "${1}"
        delete_dir "${mount_point}"

        echo "Device unmounted"
    else

        print_error "Warning: Device was not mounted"
    fi
}

restore_autoboot_file()
{
    # Write the autoboot file to the first partition of the SD card. If that
    # partition is not currently mounted, then mount it first. This file tells
    # the bootloader which partition to automatically boot into, so we set
    # this to the boot partition of pi-topOS

    echo "Restoring autoboot"

    local mount_point=$(findmnt -nr -o target -S "${SD_CARD_DEVICE_P1}")

    if [ -z "${mount_point}" ]; then

        mount_device "${SD_CARD_DEVICE_P1}" "${SD_CARD_MOUNT_POINT_P1}"
    fi

    echo "boot_partition=${PT_BOOT_PARTITION_ID}" > ${SD_CARD_MOUNT_POINT_P1}/autoboot.txt
}

reboot_system()
{
    echo "Rebooting..."

    /sbin/reboot -f
}

# Standard busybox init - from noobs init file

/bin/mount -t proc proc /proc
/bin/mount -o remount,rw,noatime /
/bin/mount -t sysfs sysfs /sys
/bin/mount -t devtmpfs dev /dev 2>/dev/null
/bin/hostname -F /etc/hostname
/bin/mount -t tmpfs tmpfs /tmp

# Newer kernel versions can load firmware from /lib/firmware by themselves without help
# However that can fail during boot due to our initrd ramdisk not being mounted in time
# Retry any pending requests

(cd /sys/class/firmware
for F in *; do
    if [ -d "$F" ]; then
        echo 1 > "$F/loading"
        cat "/lib/firmware/${F/!//}" > "$F/data"
        echo 0 > "$F/loading"
    fi
done)

# Mount p1 for logging, etc

print_title "Mounting primary partition for logging..."

mount_device "${SD_CARD_DEVICE_P1}" "${SD_CARD_MOUNT_POINT_P1}"

# Give the user a chance to cancel and drop into shell

print_title "Starting reflashing in 5s. Press enter to cancel..."

if read -r -t 5; then

    # Restore booting into pi-topOS

    restore_autoboot_file

    echo "Aborted. Run 'exit' to return to pi-topOS"

    sh
else

    # Start the reflash process with logging

    "/pt-os-installer" 2>&1 | tee "${SD_CARD_MOUNT_POINT_P1}/install-log.txt"

    print_title "Process finished. Rebooting in 30s (press Enter to skip)"
    read -r -t 30
fi

reboot_system
